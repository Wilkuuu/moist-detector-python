import network
import urequests
import time
import machine
import sys
import random
sys.path.append('/pyboard')
import moist_detector
get_moisture = moist_detector.get_moisture

# WiFi credentials
WIFI_SSID = 'Orange_Swiatlowod_5070'
WIFI_PASSWORD = 'dagonarian186'

# ntfy.sh endpoint
NTFY_URL = 'https://ntfy.sh/dagonarian'

# Message lists for different moisture states
need_water = [
    "Proszƒô podlej mnie, usycham!",
    "Wooody woooody!",
    "Klaudia, umieraaaam z pragnienia!",
    "SOS! Mayday! Potrzebujƒô H2O!",
    "Moje li≈õcie opadajƒÖ... dos≈Çownie!",
    "Jestem suchy jak pustynny kaktus (a nie jestem kaktusem!)",
    "Wodaaaa! Daj mi wodaaaa!",
    "Klaudia ratunku! Zaraz siƒô rozsypiƒô!",
    "üíß dramatyczny szept üíß woda... woda...",
    "M√≥g≈Çbym wypiƒá ca≈Çy ocean! No dobra, p√≥≈Ç szklanki wystarczy",
    "Jestem bardziej spragniony ni≈º maraton w sierpniu!",
    "Klaudia, pamiƒôtasz o mnie? Bo ja pamiƒôtam o wodzie...",
    "Alarm! Alarm! Poziom wody krytycznie niski!",
    "Moje korzenie organizujƒÖ protest! ChcƒÖ wody!",
    "Wiƒôdnƒô piƒôknie, ale wola≈Çbym nie wiƒôdnƒÖƒá wcale",
    "NAP√ìJ MNIE! Jestem jak gƒÖbka, tylko bez wody",
    "Klaudia? To ja, Tw√≥j umierajƒÖcy kwiatek...",
    "Woda jest wszystkim czego potrzebujƒô... i trochƒô s≈Ço≈Ñca",
    "Ratuj! Zaczynam przypominaƒá suszone zio≈Ça!",
    "Halo? 112? Potrzebujƒô pilnie wody! Aha, to Ty Klaudia? IDEALNIE!"
]

all_fine = [
    "Dziƒôkujƒô! Jeste≈õ mojƒÖ bohaterkƒÖ!",
    "Pamiƒôta≈Ça≈õ o mnie! Cudownie!",
    "Ahhh, przepyszna woda! Dziƒôkujƒô!",
    "Jeste≈õ najlepsza Klaudia!",
    "Czujƒô jak wracam do ≈ºycia! Dziƒôki!",
    "Mmm, pyszne! Dok≈Çadnie tego potrzebowa≈Çem!",
    "Moje li≈õcie ju≈º siƒô prostujƒÖ! Dziƒôkuuujƒô!",
    "Jeste≈õ anio≈Çem z konewkƒÖ! üòä",
    "Tak bardzo Ci dziƒôkujƒô! Czujƒô siƒô o niebo lepiej!",
    "Wiedzia≈Çem, ≈ºe na Ciebie mogƒô liczyƒá!",
    "Hurra! Woda! Jeste≈õ wspania≈Ça Klaudia!",
    "Dziƒôkujƒô za uratowanie mojego ≈ºycia! (dos≈Çownie!)",
    "Mmm, orze≈∫wiajƒÖce! To by≈Ço dok≈Çadnie to czego chcia≈Çem!",
    "Jeste≈õ najlepszƒÖ opiekunkƒÖ jakƒÖ m√≥g≈Çbym mieƒá!",
    "Dziƒôkujƒô! Moje korzenie ta≈ÑczƒÖ z rado≈õci!",
    "Cudownie! Czujƒô siƒô jak nowo narodzony!",
    "Klaudia, jeste≈õ perfekcyjna! Dziƒôkujƒô za wodƒô!",
    "Ahhh, ulgaaa! Bardzo Ci dziƒôkujƒô!",
    "To by≈Ça najlepsza woda ever! Dziƒôki!",
    "Kocham Ciƒô Klaudia! (w kwiatowy spos√≥b oczywi≈õcie!)"
]

def connect_wifi():
    """Connect to WiFi network"""
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    
    if not wlan.isconnected():
        print('Connecting to WiFi...')
        wlan.connect(WIFI_SSID, WIFI_PASSWORD)
        
        # Wait for connection with timeout
        timeout = 20
        while not wlan.isconnected() and timeout > 0:
            time.sleep(1)
            timeout -= 1
            print('.', end='')
        
        if wlan.isconnected():
            print('\nWiFi connected successfully!')
            print('Network config:', wlan.ifconfig())
            return True
        else:
            print('\nFailed to connect to WiFi')
            return False
    else:
        print('Already connected to WiFi')
        print('Network config:', wlan.ifconfig())
        return True

def send_notification(message):
    """Send notification to ntfy.sh"""
    try:
        print(f'Sending notification: {message}')
        
        # Prepare the request
        headers = {
            'Content-Type': 'text/plain'
        }
        
        # Send POST request to ntfy.sh
        response = urequests.post(NTFY_URL, data=message, headers=headers)
        
        if response.status_code == 200:
            print('Notification sent successfully!')
        else:
            print(f'Failed to send notification. Status code: {response.status_code}')
        
        response.close()
        
    except Exception as e:
        print(f'Error sending notification: {e}')

def main():
    """Main function - Continuous moisture monitoring every 5 seconds"""
    print('ESP32 Moisture Monitor - 5 Second Intervals')
    print('=' * 45)
    
    # Connect to WiFi
    if not connect_wifi():
        print('Cannot proceed without WiFi connection')
        return
    
    print('Starting moisture monitoring...')
    print('Press Ctrl+C to stop')
    print('-' * 30)
    
    # Track previous status for change detection
    previous_status = None
    reading_count = 0
    
    try:
        while True:
            # Read moisture level
            moisture_value = get_moisture()
            
            if moisture_value is not None:
                # Create timestamp
                timestamp = time.time()
                status = "WET" if moisture_value == 1 else "DRY"
                reading_count += 1
                
                print(f'[{timestamp}] Moisture: {status} (Digital: {moisture_value}) - Reading #{reading_count}')
                
                # Send notification on status change or every 10 readings
                if previous_status != status or reading_count % 10 == 0:
                    if previous_status != status:
                        # Status changed - send random message based on new status
                        if moisture_value == 0:  # WET - need water
                            message = random.choice(all_fine)
                            print(f"Status changed from {previous_status} to {status} - sending need water message")
                        else:  # DRY - all fine
                            message = random.choice(need_water)
                            print(f"Status changed from {previous_status} to {status} - sending all fine message")
                    else:
                        # Periodic update - send random message based on current status
                        if moisture_value == 0:  # WET - need water
                            message = random.choice(all_fine)
                            print(f"Periodic update - sending need water message")
                        else:  # DRY - all fine
                            message = random.choice(need_water)
                            print(f"Periodic update - sending all fine message")
                    
                    send_notification(message)
                
                previous_status = status
            else:
                print('Failed to read moisture sensor')
            
            # Wait 5 seconds before next reading
            time.sleep(5)
            
    except KeyboardInterrupt:
        print('\nMonitoring stopped by user')
        # Send final status notification
        if previous_status is not None:
            if previous_status == 'WET':
                final_message = random.choice(all_fine)
            else:
                final_message = random.choice(need_water)
            send_notification(final_message)
    except Exception as e:
        print(f'Error in main loop: {e}')
        # Send error notification
        error_message = f"‚ùå Moisture monitor error: {str(e)}"
        send_notification(error_message)
    
    print('Moisture monitoring ended')

# Run the main function
if __name__ == '__main__':
    main()

